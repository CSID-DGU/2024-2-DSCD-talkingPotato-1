plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.4'
	id 'io.spring.dependency-management' version '1.1.6'
}

group = 'org.dongguk.dscd.wooahan'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

jar {
	enabled = false
}

bootJar {
	archiveFileName.set "application.jar"
}

dependencies {
	// Spring Boot
	implementation 'org.springframework.boot:spring-boot-starter-web'

	// Spring Security
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.bouncycastle:bcpkix-jdk18on:1.78.1'
	implementation 'commons-io:commons-io:2.14.0'

	// JWT
	implementation 'io.jsonwebtoken:jjwt-api:0.12.3'
	implementation 'jakarta.xml.bind:jakarta.xml.bind-api:4.0.2'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.6'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.6'

	// Spring Validation
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'com.google.code.findbugs:jsr305:3.0.2'

	// Spring Data JPA
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'

	// QueryDSL
	implementation 'com.querydsl:querydsl-jpa:5.1.0:jakarta'
	annotationProcessor 'com.querydsl:querydsl-apt:5.1.0:jakarta'
	annotationProcessor 'jakarta.annotation:jakarta.annotation-api'
	annotationProcessor 'jakarta.persistence:jakarta.persistence-api'

	// MySQL
	runtimeOnly 'com.mysql:mysql-connector-j'

	// Lombok
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	// Swagger
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'

	// Test
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

def generatedFiles = layout.buildDirectory.dir('generated/querydsl').get().asFile

tasks.withType(JavaCompile).configureEach {
	options.getGeneratedSourceOutputDirectory().set(file(generatedFiles))
}

sourceSets {
	main.java.srcDirs += [ generatedFiles ]
}

clean {
	delete file(generatedFiles)
}

tasks.named('test') {
	useJUnitPlatform()
}
